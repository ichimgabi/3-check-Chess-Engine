 
----------------------------------------------------Etapa 1---------------------------------------------------

 -----------------------------
| Instructiuni de compilare:  |
 -----------------------------
Pentru a rula bot-ul cu interfata Xboard-ului, este suficient sa rulam urmatoarea comanda in terminal in folderul 
sursa al proiectului: xboard -fcp "make run" -debug (debug este optional), deoarece "make run" il compileaza intai cu
"make build", iar apoi il ruleaza.

Doar pentru compilare, comanda este "make build" sau doar "make".
Pentru stergerea fisierelor compilate (cele de tip .class), comanda este "make clean".
Pentru rulare (chiar daca nu a fost compilat inainte), comanda este "make run".

 ---------------------------------------
| Detalii despre Structura proiectului: |
 ---------------------------------------
Proiectul este alcatuit din mai multe clase. Au fost create cate o clasa pentru fiecare piesa
in parte, avand culoarea piesei respective, pozitia ei pe tabla si metode de miscare a piesei
(deocamdata implementat doar pentru pion).
De asemenea a fost creata o clasa de tip singleton pentru tabla de joc care contine o matrice
de obiecte de tip "piesa" (clasa parinte pentru fiecare piesa a noastra), vectori de piese
pentru accesarea lor mai rapida (deocamdata, vectorii de piese contin numai pioni).


 ----------------------------------------
| Detalii despre abordarea algoritmica:  |
 ----------------------------------------
Deocamdata la aceasta etapa nu am folosit algoritmi speciali.
Am folosit:
- indexare in matrice -> O(1);
- indexare in vector -> O(1);
- cautare in matrice -> O(n^2); unde n = 8 (dimensiunea tablei de joc)


 -----------------------
| Surse de inspiratie:  |
 -----------------------
1. Makefile-ul pentru fisierele java este luat de pe urmatorul site:

	https://www.cs.swarthmore.edu/~newhall/unixhelp/javamakefiles.html

	unde am modificat macro-ul CLASSES astfel incat sa fie fiserele noastre java, am
	adaugat o regula de build, iar regula de run depinde de regula de build;


 ------------------------------
| Responsabilitaea membrilor:  |
 ------------------------------
Pentru aceasta etapa, fiecare membru al echipei a implementat propria viziune asupra cerintei
etapei 1, pornind de la un schelet facut de catre capitanul echipei.

# Cosmin Criciu:
- implementat functiile de baza pentru miscarea pionului si deciziile bot-ului de a
misca piese/captura piese inamice
-implementat interfata de interactiune bot-xboard

# Radu Tanase:
-adaugat campuri si metode pentru usurarea apelurilor unor functii pentru miscare/cautare piese
-bugfixing la interfata de interactiune bot-xboard si adaugare raspuns la comenzi lipsa
-bugfixing la miscarea si atacul pionului

# Gabriel Poalelungi:
-creare schelet proiect
- implementat functiile de baza pentru miscarea pionului si deciziile bot-ului de a
misca piese/captura piese inamice
-implementat interfata de interactiune bot-xboard

# Gabriel Ichim:
-implementat interfata de interactiune bot-xboard



-------------------------------------------------Etapa 2-----------------------------------------------------

 -----------------------------
| Instructiuni de rulare:  |
 -----------------------------
Pentru a rula bot-ul cu interfata Xboard-ului, este suficient sa rulam urmatoarea comanda in terminal in folderul 
sursa al proiectului: xboard -fcp "make run" -debug (debug este optional), deoarece "make run" il compileaza intai cu
"make build", iar apoi il ruleaza.

Doar pentru compilare, comanda este "make build" sau doar "make".
Pentru stergerea fisierelor compilate (cele de tip .class), comanda este "make clean".
Pentru rulare (chiar daca nu a fost compilat inainte), comanda este "make run".

 ---------------------------------------
| Detalii despre Structura proiectului: |
 ---------------------------------------

- Au fost completate clasele pieselor cu metode pentru mutarea acestora:
	- Fiecare clasa are o metoda numita getMoves() care adauga intr-un vector al clasei casutele in care acesta ar putea sa mute si o metoda move() care returneaza true daca face o mutare valida si false daca nu are nicio mutare valida;

- In clasa King au fost implementate metodele:
	- Detectare de sah;
	- Cele care fac rocada mica/mare (atat pentru engine, cat si pentru player - updatarea tablei interne dupa rocada);
	- Apararea de sah (daca nu are cum sa se apere de sah, returneaza false);

- In clasa Piece au fost implementate in plus metodele de promovare a pionilor. Promovarile pe care le face engine-ul sunt alese la intamplare;

- Au fost updatate metodele din Pawn astfel incat sa poata muta astfel incat sa nu bage propriul rege in sah si sa aiba posibilitatea de a apara regele de sah in caz de nevoie;

- A fost updatat main-ul astfel incat sa mute la intamplare o piesa conform specificatiilor din cerinta;


 ----------------------------------------
| Detalii despre abordarea algoritmica:  |
 ----------------------------------------
Deocamdata la aceasta etapa nu am folosit algoritmi speciali.
Am folosit:
- indexare in matrice -> O(1);
- indexare in vector -> O(1);
- cautare in matrice -> O(n^2); unde n = 8 (dimensiunea tablei de joc)


 ------------------------------
| Responsabilitaea membrilor:  |
 ------------------------------

 Pentru aceasta etapa, task-urile au fost impartite astfel:

 	- Mutarile nebunului, turei si reginei: Cosmin Criciu + Radu Tanase
 	- Mutarile calulului: Dan-Gabriel Ichim
 	- Mutarile regelui: Gabriel Poalelungi
 	- Implementare capturare pionului prin en-passant: Dan-Gabriel Ichim + Gabriel Poalelungi
 	- Detectarea de sah + rocada mica-mare: Gabriel Poalelungi
 	- Promovarea pionilor: Dan-Gabriel Ichim

 	Urmatoarele task-uri au fost facute de catre toti membrii, in acelasi timp (meet-uri pe Discord in care un membru partaja ecranul si scria cod, in timp ce toti veneau cu idei de implementare sau debugging):

 	- Mutarile random, valide;
 	- Metoda de aparare impotriva sahului;
 	- Promovarea pionilor si rocadele din partea player-ului;
 	- Bugfixes.
